import logging
import telebot
from telebot import types
import requests
import os
import json
import time
import threading

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# Google Drive –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
GOOGLE_DRIVE_IMAGE_FILE_ID = "1NQ1NTISffzIxRiMjRO5jYKmt227JjIEU"  # FILE_ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
TEMP_IMAGE_PATH = "menu_image.jpg"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

# URL –¥–ª—è JSON —Å Gist
PRODUCTS_JSON_URL = "https://gist.githubusercontent.com/Kyryl179/78cb30587280a696559e6d71e1268e32/raw"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å Google Drive
def download_google_drive_file(file_id, output_file):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å Google Drive –ø–æ file_id."""
    url = f"https://drive.google.com/uc?export=download&id={file_id}"
    session = requests.Session()
    response = session.get(url, stream=True)

    if "confirm" in response.url:
        confirm_token = response.url.split("confirm=")[1].split("&")[0]
        url = f"https://drive.google.com/uc?export=download&id={file_id}&confirm={confirm_token}"
        response = session.get(url, stream=True)

    if response.status_code == 200:
        with open(output_file, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {output_file}")
        return True
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Å Gist
def load_products():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON —Å Gist."""
    global PRODUCTS
    try:
        response = requests.get(PRODUCTS_JSON_URL)
        if response.status_code == 200:
            PRODUCTS = response.json()
            logger.info("JSON —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {response.status_code}")
            return False
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
def periodic_product_update():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç."""
    while True:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π JSON...")
        if load_products():
            logger.info("–¢–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if not load_products():
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤.")

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
threading.Thread(target=periodic_product_update, daemon=True).start()

CATEGORY_NAMES = {
    "liquid": "–†—ñ–¥–∏–Ω–∏",
    "pod": "–ü–æ–¥–∏",
    "disposable": "–û–¥–Ω–æ—Ä–∞–∑–∫–∏",
    "snus": "–°–Ω—é—Å"
}

TOKEN = "8015483044:AAFH7_eaL_ZMjya0hh8DbL2eXtcBnlx6Dc0"
bot = telebot.TeleBot(TOKEN)
logger.info(f"TOKEN: {repr(TOKEN)}")

# –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

def init_user(user_id):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if user_id not in user_data:
        user_data[user_id] = {"last_message_id": None, "current_category": None}

def delete_last_message(user_id, chat_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    msg_id = user_data[user_id].get("last_message_id")
    if msg_id:
        try:
            bot.delete_message(chat_id, msg_id)
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {msg_id} –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {msg_id}: {e}")
        finally:
            user_data[user_id]["last_message_id"] = None

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    init_user(user_id)
    delete_last_message(user_id, chat_id)

    if not PRODUCTS:
        msg = bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        user_data[user_id]["last_message_id"] = msg.message_id
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞, –∞–ª–µ —Ç–æ–≤–∞—Ä–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        if key in PRODUCTS:
            keyboard.add(types.InlineKeyboardButton(name, callback_data=f"category_{key}"))

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Google Drive
    try:
        if download_google_drive_file(GOOGLE_DRIVE_IMAGE_FILE_ID, TEMP_IMAGE_PATH):
            with open(TEMP_IMAGE_PATH, "rb") as img_file:
                msg = bot.send_photo(chat_id, photo=img_file, caption=f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=keyboard)
            os.remove(TEMP_IMAGE_PATH)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {TEMP_IMAGE_PATH} —É–¥–∞–ª—ë–Ω")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Google Drive")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        msg = bot.send_message(chat_id, f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É):", reply_markup=keyboard)

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ–¥–∞–∂—É
    instructions = (
        "üì¶ –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —Å—é–¥–∏: @managerdydkashop\n\n"
        "üí° –©–æ–± –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤—ñ–π –ø–æ–¥ –Ω–∞ –ø—Ä–æ–¥–∞–∂:\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —Å—é–¥–∏: @managerdydkashop\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è–º —Ç–æ–≤–∞—Ä—É!"
    )
    bot.send_message(chat_id, instructions, parse_mode="Markdown")

    user_data[user_id]["last_message_id"] = msg.message_id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤."""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    init_user(user_id)
    delete_last_message(user_id, chat_id)
    data = call.data

    if data.startswith("category_"):
        category = data.split("_", 1)[1]
        user_data[user_id]["current_category"] = category
        show_products(chat_id, user_id, category)

    elif data.startswith("product_"):
        index = int(data.split("_", 1)[1])
        category = user_data[user_id].get("current_category")
        if category and index < len(PRODUCTS.get(category, [])):
            show_product_details(chat_id, user_id, PRODUCTS[category][index], category)
        else:
            msg = bot.send_message(chat_id, "‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —â–µ —Ä–∞–∑.", reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ))
            user_data[user_id]["last_message_id"] = msg.message_id

    elif data == "back_to_menu":
        handle_start(call.message)

    elif data == "back_to_products":
        category = user_data[user_id].get("current_category")
        if category:
            show_products(chat_id, user_id, category)
        else:
            handle_start(call.message)

def show_products(chat_id, user_id, category):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
    if not PRODUCTS or category not in PRODUCTS:
        msg = bot.send_message(chat_id, "‚ö†Ô∏è –¢–æ–≤–∞—Ä–∏ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        user_data[user_id]["last_message_id"] = msg.message_id
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–º–∞–≥–∞–≤—Å—è –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category}, –∞–ª–µ –≤–æ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è")
        return

    keyboard = types.InlineKeyboardMarkup()
    for i, product in enumerate(PRODUCTS.get(category, [])):
        keyboard.add(types.InlineKeyboardButton(product["name"], callback_data=f"product_{i}"))
    keyboard.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    msg = bot.send_message(chat_id, f"–¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {CATEGORY_NAMES.get(category, category)}:", reply_markup=keyboard)
    user_data[user_id]["last_message_id"] = msg.message_id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category}")

def show_product_details(chat_id, user_id, product, category):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É."""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚¨Ö –î–æ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="back_to_products"))
    keyboard.add(types.InlineKeyboardButton("üè† –î–æ –º–µ–Ω—é", callback_data="back_to_menu"))
    text = f"*{product['name']}*\n\n{product['description']}\n–¶—ñ–Ω–∞: {product['price']}"
    msg = bot.send_message(chat_id, text=text, reply_markup=keyboard, parse_mode="Markdown")
    user_data[user_id]["last_message_id"] = msg.message_id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —Ç–æ–≤–∞—Ä {product['name']}")

@bot.message_handler(commands=['status'])
def check_status(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç."""
    try:
        bot.reply_to(message, "–Ø –∞–∫—Ç–∏–≤–µ–Ω! üöÄ")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")